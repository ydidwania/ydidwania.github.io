<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-06-07T02:38:37+05:30</updated><id>http://localhost:4000/</id><title type="html">Yashvardhan Didwania</title><subtitle></subtitle><entry><title type="html">GSoC Week 3 : Connection Established</title><link href="http://localhost:4000/2018/06/03/gsoc-week-3.html" rel="alternate" type="text/html" title="GSoC Week 3 : Connection Established" /><published>2018-06-03T09:00:00+05:30</published><updated>2018-06-03T09:00:00+05:30</updated><id>http://localhost:4000/2018/06/03/gsoc-week-3</id><content type="html" xml:base="http://localhost:4000/2018/06/03/gsoc-week-3.html">&lt;p&gt;This week, I can safely say has been the most productive yet. The first part of the week was spent in setting up only a &lt;code class=&quot;highlighter-rouge&quot;&gt;ping&lt;/code&gt; message from the server. Towards the end, I managed to pass the bindings to the server and and bind the listener.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-connection&quot;&gt;Setting up Connection&lt;/h2&gt;

&lt;p&gt;I set up a basic api at &lt;code class=&quot;highlighter-rouge&quot;&gt;/connect/&lt;/code&gt; to send &lt;code class=&quot;highlighter-rouge&quot;&gt;ping&lt;/code&gt; messages at 10s intervals. To check, I was connecting to &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:12345/connect&lt;/code&gt;, becuase thats where (I thought) my api was hosted. The browser console gave this error.
&lt;code class=&quot;highlighter-rouge&quot;&gt;Content Security Policy: The page’s settings blocked the loading of a resource at self (“default-src”).&lt;/code&gt;
The &lt;a href=&quot;https://developers.google.com/web/fundamentals/security/csp/&quot;&gt;CSP&lt;/a&gt; header determines what scripts the user is allowed to load. This is to protect against cross-site scripting attacks (XSS). The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/connect-src&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;connect-src&lt;/code&gt;&lt;/a&gt; directive allows scripts to open SSE connections. However, a bunch of other changes had to be made in order to get it running on the browser. Jonas suggested trying to get everything working with &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; first.&lt;/p&gt;

&lt;p&gt;There I realized that the api was actually at &lt;code class=&quot;highlighter-rouge&quot;&gt;/api/events/v1/connect/&lt;/code&gt;, and there was nothing in the docs to suggest that. All &lt;code class=&quot;highlighter-rouge&quot;&gt;taskcluster-lib-api&lt;/code&gt; endpoints are at &lt;code class=&quot;highlighter-rouge&quot;&gt;/api/&amp;lt;serviceName&amp;gt;/&amp;lt;version&amp;gt;/&amp;lt;route&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;handling-server-errors&quot;&gt;Handling Server Errors&lt;/h2&gt;

&lt;p&gt;Error handling is crucial in node as it shuts down the server. Hence, I had to wrap most of my code in try-catch. And in cases of error if the head is already written(connection was successfully established) and the request is still open, send an error message, otherwise send a 5xx status code.&lt;/p&gt;

&lt;p&gt;When client closed the connection remotely, we had to end the response. Jonas gave me a good snippet on how we can use a combination of Promises to solve this problem and avoid the &lt;code class=&quot;highlighter-rouge&quot;&gt;write after end&lt;/code&gt; error.&lt;/p&gt;

&lt;h2 id=&quot;work-on-bindings&quot;&gt;Work on bindings&lt;/h2&gt;

&lt;p&gt;Passing bindings through &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; in bash was creating an issue, where the shell would start backgroud process in bash. And I wasn’t able to terminate the connection without closing the server. Thus I wrote a simple client script using &lt;a href=&quot;https://www.npmjs.com/package/eventsource&quot;&gt;EventSource&lt;/a&gt; at &lt;code class=&quot;highlighter-rouge&quot;&gt;test\api_test.js&lt;/code&gt;. Later this will actually contain tests.&lt;/p&gt;

&lt;p&gt;Also the json had to be url encoded. I used the &lt;a href=&quot;https://www.npmjs.com/package/urlencode&quot;&gt;urlencode&lt;/a&gt; package. It is essentially translating characters like spaces, braces, etc to a universal representation. For example a space is represented by &lt;code class=&quot;highlighter-rouge&quot;&gt;%20&lt;/code&gt; as you may have observed.&lt;/p&gt;

&lt;p&gt;For now json validation is just a function which returns true. I will need to add a check for schema in the coming week.&lt;/p&gt;

&lt;h2 id=&quot;listener&quot;&gt;Listener&lt;/h2&gt;

&lt;p&gt;I was able to bind the listener, but not receiving messages. Turns out I didn’t give the proper &lt;code class=&quot;highlighter-rouge&quot;&gt;vhost&lt;/code&gt;. This new parameter was also introduced in v10 of &lt;a href=&quot;https://github.com/taskcluster/taskcluster-client&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;taskcluster-client&lt;/code&gt;&lt;/a&gt;. After this, I opened a &lt;a href=&quot;https://github.com/taskcluster/taskcluster-client/pull/96&quot;&gt;PR&lt;/a&gt; to update their docs. Once I know what should &lt;code class=&quot;highlighter-rouge&quot;&gt;vhost&lt;/code&gt; be, I am sure this will work.&lt;/p&gt;

&lt;h2 id=&quot;coming-up&quot;&gt;Coming up..&lt;/h2&gt;

&lt;p&gt;A complete working listener, and tests. After the &lt;code class=&quot;highlighter-rouge&quot;&gt;listener&lt;/code&gt; is working, we will have to make sure we take care of all errors, and a bit of cleanup. Also, I will be travelling to my hometown this Monday. Hopefully, my productivity doesn’t take a hit!&lt;/p&gt;</content><author><name></name></author><summary type="html">This week, I can safely say has been the most productive yet. The first part of the week was spent in setting up only a ping message from the server. Towards the end, I managed to pass the bindings to the server and and bind the listener.</summary></entry><entry><title type="html">GSoC Week 1 and 2 : A New Beginning</title><link href="http://localhost:4000/2018/05/26/gsoc-week-1-and-2.html" rel="alternate" type="text/html" title="GSoC Week 1 and 2 : A New Beginning" /><published>2018-05-26T09:00:00+05:30</published><updated>2018-05-26T09:00:00+05:30</updated><id>http://localhost:4000/2018/05/26/gsoc-week-1-and-2</id><content type="html" xml:base="http://localhost:4000/2018/05/26/gsoc-week-1-and-2.html">&lt;p&gt;These have been quite eventful two weeks. I am writing two weeks together beacuse there isn’t much to write about week one. I started watching &lt;strong&gt;Star Wars&lt;/strong&gt; back then and was instantly hooked. I am already done with The Original and The Prequel trilogies, and probably ended up with a little guilt too :P. Now coming back to the important stuff.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/star-wars.jpg&quot; alt=&quot;star-wars&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;major-changes&quot;&gt;Major Changes&lt;/h2&gt;

&lt;p&gt;In the first chat I had with &lt;a href=&quot;https://mozillians.org/en-US/u/jonasfj/&quot;&gt;Jonas&lt;/a&gt;, post selection, he told me about this new technology, &lt;strong&gt;Server Sent Events&lt;/strong&gt;, which can essentially replace Websockets(which we initially planned to use, and my proposal was based on it) in a lot of places. The &lt;a href=&quot;https://developer.mozilla.org/en-US/&quot;&gt;Mozilla Developer Network&lt;/a&gt; had advised him to use it. I will elaborate on what is SSE as we go on. A major advantage was that client side implementation becomes really simple. But this also means, we will have to write it again. Some browsers like the Microsoft Edge &lt;a href=&quot;https://caniuse.com/#feat=eventsource&quot;&gt;dont support&lt;/a&gt; it as yet, but there are &lt;a href=&quot;https://github.com/Yaffle/EventSource&quot;&gt;polyfills&lt;/a&gt; for that, so all good.&lt;/p&gt;

&lt;p&gt;After much deliberation, we have decided to drop the automatic reconnect feature, because it allows us to be more  relaible and robust, without leaking resources. It took a while for me to understand the thought behind it, and needs a separate blogpost to explain it. This trims down my project even further, which means I can get to &lt;a href=&quot;https://github.com/taskcluster/taskcluster-github/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;taskcluster-github&lt;/code&gt;&lt;/a&gt; or r14y bugs faster :)&lt;/p&gt;

&lt;h2 id=&quot;server-sent-events&quot;&gt;Server Sent Events&lt;/h2&gt;

&lt;p&gt;As the name suggests, it is speifically designed for the purpose of sending notifications / messagges from the server. The server maintains an event stream which is nothing more than a &lt;strong&gt;simple text stream&lt;/strong&gt; over an http connection. It is essentially a one way channel flowing from server to client only, unlike Websockets where two way commmunication is possible. The downside is that the connection has to be kept open for as long as you want to receive messages. The docs here. Each message has four fields, &lt;code class=&quot;highlighter-rouge&quot;&gt;event&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;retry&lt;/code&gt;, and two messages are separated by a newlline &lt;code class=&quot;highlighter-rouge&quot;&gt;\n&lt;/code&gt;. All other fields are ignored by &lt;code class=&quot;highlighter-rouge&quot;&gt;text/event-stream&lt;/code&gt;. So our event stream looks something like this -&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;event: pulse-ready\n
data: {message: &quot;we are now actively listening&quot;} \n
\n
event: pulse-message\n
data: {....} \n
id: &amp;lt;AMQP-message-id&amp;gt; \n
\n
event: pulse-message\n
data: {...} \n
id: &amp;lt;AMQP-message-id&amp;gt; \n
\n
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The client side code becomes as simple as this  -&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var source = new EventSource('URL');

    // handle messages
    source.onmessage = function(event) {
        // Do something with the data:
        event.data;
    };
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Read more about Server Sent Events and its implementation &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;alternatives-in-the-past&quot;&gt;Alternatives in the past&lt;/h2&gt;

&lt;p&gt;The most widely used alternative were Websockets. Historically, the way to receive information is to ask for it, and this is called Polling. A slight variant is Long Polling in which the server holds the request until it has new data to send. However it has several issues like high latency and overloading the server. I found the image below immmensely helpful and also the blogs &lt;a href=&quot;https://streamdata.io/blog/server-sent-events/&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://www.smashingmagazine.com/2018/02/sse-websockets-data-flow-http2/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/sse.png&quot; alt=&quot;sse&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-have-i-done-&quot;&gt;What have I done ?&lt;/h2&gt;

&lt;p&gt;The first week went by reading documentations and trying to get SSE working locally. Jonas advised me to take a look at &lt;a href=&quot;https://github.com/taskcluster/taskcluster-queue/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;taskcluster-queue&lt;/code&gt;&lt;/a&gt; and structure my code in a similar way. It is really well written and Jonas told me he’d done long polling in it, which is awesome. I started out with &lt;a href=&quot;https://github.com/taskcluster/taskcluster-events/pull/6&quot;&gt;this&lt;/a&gt; PR. It has only 13 commits as of now. I am using various &lt;code class=&quot;highlighter-rouge&quot;&gt;taskcluster-lib-*&lt;/code&gt; libraries, which is the standard.&lt;/p&gt;

&lt;p&gt;There is a major update of all libraries going on to use &lt;code class=&quot;highlighter-rouge&quot;&gt;rootUrl&lt;/code&gt;, as part of a bigger Redeploability initiative, to make Taskcluster easy to use for people both inside and outside of the Mozilla network. Here are the trackers - &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1427839&quot;&gt;Internal Redpeployability&lt;/a&gt;, &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1427838&quot;&gt;External Redeployability&lt;/a&gt;. The extensive list of r14y bugs are &lt;a href=&quot;https://bugzilla.mozilla.org/buglist.cgi?quicksearch=redeployability&amp;amp;list_id=14167797&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;how-does-it-affect-my-project-&quot;&gt;How does it affect my project ?&lt;/h2&gt;

&lt;p&gt;I had originally written the code using the same versions as in &lt;a href=&quot;https://github.com/taskcluster/taskcluster-queue/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;taskcluster-queue&lt;/code&gt;&lt;/a&gt;. Jonas told me to update to v10 as all &lt;code class=&quot;highlighter-rouge&quot;&gt;tascluster-lib-*&lt;/code&gt; had been bumped up to reflect major changes in specification. For example &lt;a href=&quot;https://github.com/taskcluster/taskcluster-lib-loader/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;taskcluster-lib-loader&lt;/code&gt;&lt;/a&gt; went from v2.0.0 to v10.0.0&lt;/p&gt;

&lt;p&gt;I have since had to make changes, which has slowed down my work. Jonas came up with this idea that we should use &lt;a href=&quot;https://github.com/taskcluster/taskcluster-lib-api/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;taskcluster-lib-api&lt;/code&gt;&lt;/a&gt; to create an API endpoint which we can use (or in some ways abuse) for our needs. The client can send a GET request to this endpoint to establish a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Keep-Alive&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;keep-alive&lt;/code&gt;&lt;/a&gt; connection.&lt;/p&gt;

&lt;p&gt;I am unable to a successful build at the moment. I will be coordinating with &lt;a href=&quot;https://mozillians.org/en-US/u/dustin/&quot;&gt;Dustin&lt;/a&gt; about the latest changes, which haven’t yet made it to the docs.&lt;/p&gt;

&lt;h2 id=&quot;coming-up&quot;&gt;Coming up&lt;/h2&gt;

&lt;p&gt;First on my list is to get this thing running. After that, I will have to create a &lt;code class=&quot;highlighter-rouge&quot;&gt;docs/&lt;/code&gt; folder to document the endpoint. Then, write a few simple tests and at the same time add &lt;a href=&quot;https://github.com/taskcluster/taskcluster-client#using-the-listener&quot;&gt;PulseListener&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;other-news&quot;&gt;Other news&lt;/h2&gt;

&lt;p&gt;I was lucky enough to have gotten my visa interview in such quick time. I finally received my US visa to be able to travel to San Francisco for &lt;a href=&quot;https://wiki.mozilla.org/All_Hands/&quot;&gt;All Hands&lt;/a&gt;. I will be leaving on June 11. I will have to complete the thing above if I am stay on schedule.&lt;/p&gt;</content><author><name></name></author><summary type="html">These have been quite eventful two weeks. I am writing two weeks together beacuse there isn’t much to write about week one. I started watching Star Wars back then and was instantly hooked. I am already done with The Original and The Prequel trilogies, and probably ended up with a little guilt too :P. Now coming back to the important stuff.</summary></entry><entry><title type="html">GSoC Selection</title><link href="http://localhost:4000/2018/05/01/gsoc-selection.html" rel="alternate" type="text/html" title="GSoC Selection" /><published>2018-05-01T13:45:53+05:30</published><updated>2018-05-01T13:45:53+05:30</updated><id>http://localhost:4000/2018/05/01/gsoc-selection</id><content type="html" xml:base="http://localhost:4000/2018/05/01/gsoc-selection.html">&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/gsoc_cover.png&quot; alt=&quot;gsoc&quot; title=&quot;Google Summer of Code&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This semester finally ended with some great news and that is reason enough to write my first blogpost. My proposal for &lt;a href=&quot;https://summerofcode.withgoogle.com/&quot;&gt;Google Summer of Code 2018&lt;/a&gt; with Mozilla has been accepted. Here I will write about how I started contributing to Mozilla and open source in general and then a bit on my project and what’s ahead for the summers.&lt;/p&gt;

&lt;h2 id=&quot;a-little-prep&quot;&gt;A Little Prep&lt;/h2&gt;

&lt;p&gt;The title of my project is &lt;strong&gt;Improved Taskcluster Pulse Backend&lt;/strong&gt;. I will be working within &lt;a href=&quot;https://docs.taskcluster.net/&quot;&gt;Taskcluster&lt;/a&gt; team to
rewrite tascluster-events. &lt;a href=&quot;https://wiki.mozilla.org/Auto-tools/Projects/Pulse&quot;&gt;Pulse&lt;/a&gt; is a system to exchange messages, giving more visibility to Mozilla’s tools and allowing for more dynamic and informative tools. It follows a publisher-subscriber pattern whereby a publisher can send messages to a topic exchange and consumers can create queues to bind to thses exchanges.&lt;/p&gt;

&lt;p&gt;Each message is published with a routing key. The structure is something similar to different threads in a subreddit. Subscribers can specify which exhange and route they want to subscribe to. All if this is managed by a &lt;a href=&quot;https://www.rabbitmq.com/&quot;&gt;RabbitMQ&lt;/a&gt; server at &lt;code class=&quot;highlighter-rouge&quot;&gt;pulse.mozilla.org&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-will-i-be-doing&quot;&gt;What will I be doing?&lt;/h2&gt;

&lt;p&gt;Communication becomes more and more important as the project becomes larger. The web-client, &lt;a href=&quot;https://tools.taskcluster.net/pulse-inspector&quot;&gt;Pulse Inspector&lt;/a&gt; is a tool to verify that messages being published are being handled correctly to their specified route, and they end up in receiver queues.&lt;/p&gt;

&lt;p&gt;Coming back to taskcluster-events. It is a service for web clients to listen to pulse messages. &lt;strong&gt;RabbitMQ uses &lt;a href=&quot;https://en.wikipedia.org/wiki/Advanced_Message_Queuing_Protocol&quot;&gt;AMQP&lt;/a&gt;&lt;/strong&gt; and connections from browsers are usually &lt;a href=&quot;https://en.wikipedia.org/wiki/Transmission_Control_Protocol&quot;&gt;tcp&lt;/a&gt;, making it harder for web clients to directly use RabbitMQ.
Tascluster-events solves the problem by using Websockets, and creating RabbitMQ queue for each Websocket connection and pushes messages from the queue to the websocket. It is old and poorly designed. My job will be to completely rebuild taskcluster-events from scratch, ensuring it is robust and free of major bugs or failures.&lt;/p&gt;

&lt;p&gt;I am fortunate to have &lt;strong&gt;Jonas Finnemann Jensen&lt;/strong&gt; (irc: &lt;a href=&quot;https://mozillians.org/en-US/u/jonasfj/&quot;&gt;jonasfj&lt;/a&gt;) as my mentor for this project. Lots to learn from him. The finer details about the project can be found in my proposal &lt;a href=&quot;https://drive.google.com/file/d/1egLVTK9WHlgGaYQfeFiUHMSAnAoLjFTF/view?usp=sharing&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The RFC for this is &lt;a href=&quot;https://github.com/taskcluster/taskcluster-rfcs/pull/104&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;plan-for-ahead&quot;&gt;Plan for Ahead&lt;/h2&gt;

&lt;p&gt;Well, vacations always start with a lot of plans in mind. I will have to go over my proposal again, owing to the recently concluded end semester exams. I aim to be proficient in javascript by the end of it. Coding phase begins next week, but I want to have my environment and repository ready before that. This blog will primarily be used to document any progress I make on my project, making it easier to revisit in the future. Looking forward to an exciting summer and ahead !!&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry></feed>